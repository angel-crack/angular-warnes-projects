<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <node name="21. Services" unique_id="45" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1708871442" ts_lastsave="1708885779">
    <rich_text>[+] Servicios

En un servicio vamos a agrupar unos metodos que tengan un uso practico


ng g s modules/auth/services/Auth                                                                                                                                                             ─╯
CREATE src/app/modules/auth/services/auth.service.spec.ts (347 bytes)
CREATE src/app/modules/auth/services/auth.service.ts (133 bytes)




auth/
┣ pages/
┃ ┗ login-page/
┃   ┣ login-page.component.css
┃   ┣ login-page.component.html
┃   ┣ login-page.component.spec.ts
┃   ┗ login-page.component.ts
┣ services/
┃ ┣ auth.service.spec.ts
┃ ┗ auth.service.ts

	import </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text> Injectable </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text> from </rich_text>
    <rich_text foreground="#3ad900">'@angular/core'</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">;</rich_text>
    <rich_text>

	@Injectable</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">({</rich_text>
    <rich_text>
	  providedIn</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> </rich_text>
    <rich_text foreground="#3ad900">'root'</rich_text>
    <rich_text>
	</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">})</rich_text>
    <rich_text>
	</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">export</rich_text>
    <rich_text> class AuthService </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>

	  </rich_text>
    <rich_text foreground="#ffdd00">constructor()</rich_text>
    <rich_text> </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text> </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>

	  sendCredentials</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>email</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> string , password</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> string</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">):</rich_text>
    <rich_text> void</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
		console.log</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text foreground="#3ad900">'its working the service'</rich_text>
    <rich_text>,email,password</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text>
	  </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>

	</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>
	
	
Hemos creado un metodo sendCredentials en el servicio al que le pasaremos un email y un pass

┣ auth-routing.module.ts
┗ auth.module.ts

[+] Cabe resaltar que cuando enviabamos los email y password al form lo haciamos desde el componente como podemos observar

</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>


Si modificamos el componente de la siguiente manera podemos ver como se manda desde el auth.service


	constructor</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>private </rich_text>
    <rich_text background="#ffff78780000">authService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> AuthService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{}</rich_text>
    <rich_text> ⇒ En el constructor asiganamos un alias e importamos el servicio

	  </rich_text>
    <rich_text foreground="#ffdd00">sendLogin()</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> void </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
		const </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>email, password</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text> = this.formLogin.value</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">;</rich_text>
    <rich_text>
		</rich_text>
    <rich_text background="#ffff78780000">this.authService.sendCredentials</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>email,password</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> ⇒ Y llamamos al metodo aqui
	  </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>


</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>


=====================

[+] Podemos ver que en el tracks-page tenemos como componente hijo los card player y le pasamos una data de informacion

</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>


[+] Creamos el servicio de multimedia

ng g s shared/services/Multimedia

</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>

Y creamos un EventEmitter 

[+] Injectamos el servicio en los cardplayer y hacemos que cuando damos play en ellos se emita un evento que cotiene la data del track del elemento

</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>

constructor</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>private multimediaService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text>MultimediaService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{}</rich_text>
    <rich_text>

</rich_text>
    <rich_text foreground="#ffdd00">ngOnInit()</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> void </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
  
</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>

sendPlay</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>track</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> TrackModel</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
  this.multimediaService.callback.emit</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>track</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> ⇒ Emitimos el evento con esta funcion y esperariamos un data de un TrackModel
</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>


Y lo aplicamos al HTML

        
	&lt;div class=</rich_text>
    <rich_text foreground="#3ad900">"buttons-player"</rich_text>
    <rich_text>&gt;
        &lt;button </rich_text>
    <rich_text background="#616135358383" foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text background="#616135358383">click</rich_text>
    <rich_text background="#616135358383" foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text background="#616135358383">=</rich_text>
    <rich_text background="#616135358383" foreground="#3ad900">"sendPlay(track)"</rich_text>
    <rich_text> *ngIf=</rich_text>
    <rich_text foreground="#3ad900">"true"</rich_text>
    <rich_text> class=</rich_text>
    <rich_text foreground="#3ad900">"play-btn"</rich_text>
    <rich_text>&gt;
            &lt;i class=</rich_text>
    <rich_text foreground="#3ad900">"uil "</rich_text>
    <rich_text> [ngClass]=</rich_text>
    <rich_text foreground="#3ad900">"{'uil-play':true}"</rich_text>
    <rich_text>&gt;&lt;</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">/</rich_text>
    <rich_text>i&gt;
        &lt;</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">/</rich_text>
    <rich_text>button&gt;
        &lt;button *ngIf=</rich_text>
    <rich_text foreground="#3ad900">"false"</rich_text>
    <rich_text> class=</rich_text>
    <rich_text foreground="#3ad900">"play-btn"</rich_text>
    <rich_text>&gt;
            &lt;i class=</rich_text>
    <rich_text foreground="#3ad900">"uil uil-play"</rich_text>
    <rich_text>&gt;&lt;</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">/</rich_text>
    <rich_text>i&gt;
        &lt;</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">/</rich_text>
    <rich_text>button&gt;
    &lt;</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">/</rich_text>
    <rich_text>div&gt;
    
    
[+] Nos vamos al media player e injectamos el servicio y en el ciclo inicial del componente hacemos un subscribe

constructor</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>private multimediaService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text>MultimediaService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">){}</rich_text>
    <rich_text>

  </rich_text>
    <rich_text foreground="#ffdd00">ngOnInit()</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> void </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
    const observer1$</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text>Subscription = this.multimediaService.callback.subscribe</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text> ⇒ </rich_text>
    <rich_text background="#e0e01b1b2424">Subscribe here</rich_text>
    <rich_text>
      </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>Response</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> TrackModel</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> =&gt; </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
        console.log</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text foreground="#3ad900">'recibiendo...'</rich_text>
    <rich_text>, Response</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text>
      </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>
    </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text>
  </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>
  
  

[+] Como cada evento de subcripcion genera un proceso en la memoria al momento de escalarse se puede convertir en un problema, por lo que vamos a desubscribirnos cuando el componente sea destruido, se hace de la siguiente manera:



   constructor</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>private multimediaService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text>MultimediaService</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">){}</rich_text>
    <rich_text>
  listObservers</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> Array</rich_text>
    <rich_text foreground="#ffdd00">&lt;</rich_text>
    <rich_text>Subscription&gt; = []</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">;</rich_text>
    <rich_text> ⇒ </rich_text>
    <rich_text background="#e0e01b1b2424">Creando lista aquí</rich_text>
    <rich_text>
  </rich_text>
    <rich_text foreground="#ffdd00">ngOnInit()</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> void </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
    const observer1$</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text>Subscription = this.multimediaService.callback.subscribe</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>
      </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text>Response</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> TrackModel</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> =&gt; </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
        console.log</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text foreground="#3ad900">'recibiendo...'</rich_text>
    <rich_text>, Response</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text>
      </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>
    </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text>
    this.listObservers = [observer1$] ⇒ </rich_text>
    <rich_text background="#e0e01b1b2424">Asignandola aqui</rich_text>
    <rich_text>
  </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <rich_text>
  </rich_text>
    <rich_text foreground="#ffdd00">ngOnDestroy()</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">:</rich_text>
    <rich_text> void </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">{</rich_text>
    <rich_text>
    this.listObservers.forEach</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">(</rich_text>
    <rich_text> u =&gt; u.</rich_text>
    <rich_text foreground="#ffdd00">unsubscribe()</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">)</rich_text>
    <rich_text> ⇒ </rich_text>
    <rich_text background="#e0e01b1b2424">Unsubscribe here</rich_text>
    <rich_text>
  </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">}</rich_text>
    <encoded_png char_offset="1165" justification="left" link="" sha256sum="1542aac4c9ddd8031ae7a2555ad2c7b1cb591b81399f49d537adc33de18484d2"/>
    <encoded_png char_offset="1546" justification="left" link="" sha256sum="8716bd994dfde43a44a7a1d9e8c2f10459f866ac6486230a6f6c7b274e3d77cb"/>
    <encoded_png char_offset="1694" justification="left" link="" sha256sum="9afe9a3e6e638a34a92aaa32da528a76646dc207740444c903e4d0cc9c0ea145"/>
    <codebox char_offset="1772" justification="left" frame_width="759" frame_height="100" width_in_pixels="1" syntax_highlighting="sh" highlight_brackets="1" show_line_numbers="0">import { EventEmitter, Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class MultimediaService {

  callback: EventEmitter&lt;any&gt; = new EventEmitter&lt;any&gt;();

  constructor() { }
}</codebox>
    <encoded_png char_offset="1952" justification="left" link="" sha256sum="4f9f89fab4ea498c30c1c42f0396f6c34c17c5ffca72ac98d04bb81437fe7a89"/>
  </node>
</cherrytree>

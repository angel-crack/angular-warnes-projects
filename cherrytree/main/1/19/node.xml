<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <node name="18. Directivas" unique_id="19" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1708026621" ts_lastsave="1708528467">
    <rich_text>[+] Es un atributo que cambia la apariencia o el comportamiento de un DOM Element

En el path de shared creamos una carpeta de directivas ( en este modulo porque las dirctivas es algo available para todo el mundo )

Y corremos el siguiente comando por consola


</rich_text>
    <rich_text justification="left"></rich_text>
    <rich_text>


Creandonos loa siguiente estructura 

shared/
┣ directives/
┃ ┣ img-broken.directive.spec.ts
┃ ┗ img-broken.directive.ts

@Directive({
  selector: </rich_text>
    <rich_text foreground="#3ad900">'</rich_text>
    <rich_text scale="h1" foreground="#3ad900">img</rich_text>
    <rich_text foreground="#3ad900">[appImgBroken]'</rich_text>
    <rich_text> ⇒ this selector solo se puede aplicar a los IMG
})

constructor(</rich_text>
    <rich_text weight="heavy">private</rich_text>
    <rich_text> elHost: ElementRef) {  ⇒ En el constructor de la clase declaramos una propiedad privada y le asignamos el elemento hosteado
   }

  @HostListener(</rich_text>
    <rich_text foreground="#3ad900">'error'</rich_text>
    <rich_text>) handleError(): </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">void</rich_text>
    <rich_text>{
     </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">const</rich_text>
    <rich_text> elNative = </rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">this</rich_text>
    <rich_text>.elHost.nativeElement
     console.</rich_text>
    <rich_text foreground="#ff9d00" weight="heavy">log</rich_text>
    <rich_text>(elNative.src)
  }

El HostListener va a escuhar los eventos del atributo del host, en este caso a los eventos del atributo HTML IMG

el evento 'error'  es uno de los eventos HTML:

</rich_text>
    <rich_text link="webs https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/error_event">https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/error_event</rich_text>
    <rich_text>

@HostListener(</rich_text>
    <rich_text foreground="#3ad900">'error'</rich_text>
    <rich_text>) </rich_text>
    <rich_text scale="h1">declaramos una funcion</rich_text>
    <rich_text> ⇒ handleError(): void{}

declaramos handleError como una funcion que no retorna nigun valor
 
 
Se le puede agregar un @Input() para darle mas funcionalidades a la directiva.

┗ shared.module.ts

Procedemos a exportarla en el shared module


[+] La directiva va a ser aplicada en un elemento HTML y este va a ser conocido como huesped (host)




</rich_text>
    <codebox char_offset="262" justification="left" frame_width="1864" frame_height="100" width_in_pixels="1" syntax_highlighting="powershell" highlight_brackets="1" show_line_numbers="0">ng g d shared/directives/ImgBroken                                                                                                          ─╯
CREATE src/app/shared/directives/img-broken.directive.spec.ts (237 bytes)
CREATE src/app/shared/directives/img-broken.directive.ts (147 bytes)
UPDATE src/app/shared/shared.module.ts (1463 bytes)</codebox>
  </node>
</cherrytree>
